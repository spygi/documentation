## Glossary
Modules
Components
Services


## @NgModule (app.module.ts)
Every app has at least 1 module. Differences with JS modules.
Feature modules are NgModules for the purpose of organizing code. The structure of an NgModule is the same whether it is a root module or a feature module.

- Declarations: your components, directives and pipes (not modules).
- Imports: other _NgModules_ that this particular module needs to function properly
- Providers: the service providers, they are available app-wide. You can scope them when using feature modules and lazy loading
- Bootstrap: creates the component(s) listed in the bootstrap array and inserts each one into the browser DOM.
- Exports: what this module exports to other modules that might import it.



## @Component
Every component must be declared in exactly one NgModule: when you need it elsewhere, import the module that has the declarable you need in it.
[] input
() output
[(ngModel)]: 2-way binding (model <-> view)
Event binding lets your app respond to user input in the target environment by updating your application data.
Property binding lets you interpolate values that are computed from your application data into the HTML.

## Services
To access data, usually a singleton
@Injectable: providedIn = 'root' the same as in having it in app.module's providers but better because it is tree shakeable.

How does it work with lazy loading though? It works https://stackoverflow.com/a/53010605/2259743
The advantage of providers = [] is if you don't want a service to be global (across the whole app)

## Routing
A module. (It has a rooting service-singleton) Import it in app.module. 
Have an array of routes to Components.
routerLink to the route.
Make a component routable by injecting ActivatedRoute and Location (if you need a back button)

Since the router deals with a global shared resource--location, we cannot have more than one router service active.
`forRoot` creates a module that contains all the directives, the given routes, and the router service itself. 
`forChild` creates a module that contains all the directives and the given routes, but does not include the router service.

first match wins strategy
defined in a separate module or not

TODO: typesafety in lazy loaded modules?
Pattern for navigation to other pages: have router-outlet surround the whole page?
TODO: https://medium.com/@shairez/angular-routing-a-better-pattern-for-large-scale-apps-f2890c952a18

## TODO Forms 

## TODO Template language

## i18n
Provider in app.module { provide: LOCALE_ID, useValue: 'fr' }
 
## Others
- Pipes
- Directives: Attribute Directives and Structural Directives

## Good reads 
Styleguide 
https://blog.angularindepth.com/ngrx-tips-tricks-69feb20a42a7
Why effects: https://medium.com/city-pantry/handling-errors-in-ngrx-effects-a95d918490d9

##
- ng uses angular.json not just to make the files but also to serve/build. TODO: Find where in code. In angular.json index.html and main.ts are defined. 
In TAWS we included main.js as script.  
- index.html includes custom app tag
- main.ts bootstraps app.module.ts.
- app.module.ts (declares and) bootstraps app.component into the DOM
- app.component.ts has that custom app tag as a selector. it also has its own html that is "injected" into the tag.

TODO: Bundle for production 

Component interaction parent-child:
- @Input/Output are both defined at the child
- Parent passes [data] to the child, gets (events) from children 
TODO: what is the difference with model-view changes?



